import { CardElement, useElements, useStripe } from "@stripe/react-stripe-js";
import axios from "axios";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { Link, Navigate, useNavigate } from 'react-router-dom';


const DonateNow = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const stripe = useStripe();
  const elements = useElements();
  const [donationAmount, setDonationAmount] = useState();
  const [selectedCategory, setSelectedCategory] = useState("");

  console.log(donationAmount);
  console.log(selectedCategory);
  const onSubmit = async (data) => {
    console.log(data);
    try {
      const response = await axios.post('http://localhost:5000/create-payment-intent', {
        price: data.selectedAmount || data.customAmount,
        

      });

      const clientSecret = response.data.clientSecret;

      const cardElement = elements.getElement(CardElement);
      const { error, paymentMethod } = await stripe.createPaymentMethod({
        type: 'card',
        card: cardElement,
      });

      if (error) {
        console.error('Error creating payment method:', error);
      } else {
        const { paymentIntent, error: confirmError } = await stripe.confirmCardPayment(
          clientSecret,
          {
            payment_method: paymentMethod.id,
          }
        );

        if (confirmError) {
          console.error('Error confirming card payment:', confirmError);
        } else {
          console.log('PaymentIntent', paymentIntent);

          // Now you can handle the donation on the server and save the details to your database
          const donationData = {
            selectedAmount: paymentIntent.amount_received / 100, // Convert from cents to dollars
            selectedCategory,
            // Add other data like message, if needed
          };

          await axios.post('/handle-donation', donationData);

          // Redirect or show a success message here
        }
      }
    } catch (error) {
      console.error('Error processing donation:', error);
    }
  };

  const handleCustomAmountChange = (e) => {
    setDonationAmount(e.target.value);
  };

  return (
    <div className="relative my-3 flex flex-col justify-center min-h-screen overflow-hidden">
      <div className="w-full p-6 m-auto bg-white rounded-md shadow-xl shadow-rose-600/40 ring  ring-primary lg:max-w-4xl">
        <h1 className="text-5xl font-semibold text-center text-primary uppercase mb-12">
          Donate Now
        </h1>
        <form onSubmit={handleSubmit(onSubmit)} className="mt-6">
          <div>
            {/* Donation Amount */}
            <div className="mb-4">
              <label
                htmlFor="amount"
                className="block text-sm font-semibold text-gray-800 mb-2"
              >
                Donation Amount
              </label>
              <div className="flex space-x-4">
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${donationAmount === 100 ? "bg-red-700" : ""
                    }`}
                  onClick={() => setDonationAmount(100)}
                >
                  $100
                </button>
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${donationAmount === 200 ? "bg-red-700" : ""
                    }`}
                  onClick={() => setDonationAmount(200)}
                >
                  $200
                </button>
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${donationAmount === 1500 ? "bg-red-700" : ""
                    }`}
                  onClick={() => setDonationAmount(1500)}
                >
                  $1500
                </button>
              </div>
            </div>

            {/* Other Amount */}
            <div className="mb-4">
              <label
                htmlFor="other amount"
                className="block text-sm font-semibold text-gray-800 mb-2"
              >
                Other Amount
              </label>
              <input
                type="number"
                onChange={handleCustomAmountChange}
                {...register("customAmount")}
                className="block px-4 py-2 text-primary bg-white border rounded-md focus:border-primary focus:ring-primary focus:outline-none focus:ring focus:ring-opacity-40 text-xl font-semibold tracking-wider"
              />
            </div>

            {/* category */}
            <div className="mb-4">
              <label
                htmlFor="category"
                className="block text-sm font-semibold text-gray-800 mb-2"
              >
                Category
              </label>
              <div className="flex space-x-4">
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${selectedCategory === "Poor Pregnancy" ? "bg-red-700" : ""
                    }`}
                  onClick={() => setSelectedCategory("Poor Pregnancy")}
                >
                  Poor Pregnancy
                </button>
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${selectedCategory === "Elder Homes" ? "bg-red-700" : ""
                    }`}
                  onClick={() => setSelectedCategory("Elder Homes")}
                >
                  Elder Homes
                </button>
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${selectedCategory === "Homeless Children" ? "bg-red-700" : ""
                    }`}
                  onClick={() => setSelectedCategory("Homeless Children")}
                >
                  Homeless Children
                </button>
                <button type="button"
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${selectedCategory === "Natural Disasters" ? "bg-red-700" : ""
                    }`}
                  onClick={() => setSelectedCategory("Natural Disasters")}
                >
                  Natural Disasters
                </button>
                <button
                  className={`px-4 py-2 text-white bg-primary rounded-md focus:outline-none ${selectedCategory === "Self Donate" ? "bg-red-700" : ""
                    }`}
                  onClick={() => setSelectedCategory("Self Donate")}
                >
                  Self Donate
                </button>
              </div>
            </div>
          </div>
          <div className="mb-2">
            <label
              htmlFor="message"
              className="block text-sm font-semibold text-gray-800"
            >
              Message
            </label>
            <textarea
              {...register("message")}
              className="block w-full px-4 py-2 mt-2 text-primary bg-white border rounded-md focus:border-primary focus:ring-primary focus:outline-none focus:ring focus:ring-opacity-40 text-xl font-semibold tracking-wider"
            />
          </div>
          <div className="mt-6 flex justify-center">
            <button
              type="submit"
              className="px-24 py-2 tracking-wide text-white bg-secondary rounded-md focus:outline-none focus:bg-secondary hover:bg-blue-700 hover:text-white hover:border-0 transition duration-500 ease-in-out transform hover:scale-95"
            >
              Donate
            </button>

          </div>

          {/* Add these hidden inputs */}
          <input
            type="hidden"
            {...register("selectedAmount", { value: donationAmount })}
          />
          <input
            type="hidden"
            {...register("selectedCategory", { value: selectedCategory })}
          />
        </form>
      </div>
    </div>
  );
};

export default DonateNow;
